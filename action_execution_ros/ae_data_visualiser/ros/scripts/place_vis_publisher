#!/usr/bin/env python
'''
    Copyright 2018 by Alex Mitrevski <aleksandar.mitrevski@h-brs.de>

    This file is part of action-execution.

    action-execution is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    action-execution is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with action-execution. If not, see <http://www.gnu.org/licenses/>.
'''

from os.path import join
import rospy
import numpy as np
import matplotlib.pyplot as plt

from visualization_msgs.msg import Marker, MarkerArray

from action_execution.action import Action
from action_execution.extern.transformations import quaternion_from_euler
from ae_msgs.msg import ActionDataQuery

class PlaceDataVisualisationPublisher(object):
    def __init__(self):
        self.action_data_query_topic = rospy.get_param('~action_data_query_topic',
                                                       '/action_data_query')
        self.marker_topic_root = rospy.get_param('~marker_topic_root',
                                                 '/ae/place/')
        rospy.Subscriber(self.action_data_query_topic,
                         ActionDataQuery,
                         self.get_action_data)

    def get_action_data(self, msg):
        action_name = msg.action_name
        action_model = Action(action_name=action_name)
        input_data, output_data = action_model.get_execution_data(msg.start_time,
                                                                  msg.end_time)

        if output_data is not None:
            for model, model_data in output_data.iteritems():
                marker_array_msg = MarkerArray()
                topic = join(self.marker_topic_root, model)
                pub = rospy.Publisher(topic, MarkerArray, queue_size=100, latch=True)

                poses = model_data['candidate_poses']
                probs = np.array(model_data['success_probabilities'])
                cmap_factor = len(probs)
                colormap = plt.cm.RdYlGn((probs - np.min(probs)) / (np.max(probs) - np.min(probs)))[:, 0:3]
                for i, pose in enumerate(poses):
                    marker = Marker()
                    marker.id = i
                    marker.ns = '/ae'
                    marker.type = Marker.ARROW
                    marker.action = Marker.ADD

                    marker.header.frame_id = pose.frame_id
                    marker.pose.position.x = pose.position.x
                    marker.pose.position.y = pose.position.y
                    marker.pose.position.z = pose.position.z

                    quat_list = quaternion_from_euler(pose.orientation.z,
                                                      pose.orientation.y,
                                                      pose.orientation.x)
                    marker.pose.orientation.x = quat_list[0]
                    marker.pose.orientation.y = quat_list[1]
                    marker.pose.orientation.z = quat_list[2]
                    marker.pose.orientation.w = quat_list[3]

                    marker.scale.x = 0.1
                    marker.scale.y = 0.01
                    marker.scale.z = 0.01

                    marker.color.r = colormap[i, 0]
                    marker.color.g = colormap[i, 1]
                    marker.color.b = colormap[i, 2]
                    marker.color.a = 1.

                    marker_array_msg.markers.append(marker)
                pub.publish(marker_array_msg)

    def spin(self, frequency):
        rate = rospy.Rate(frequency)
        while not rospy.is_shutdown():
            rate.sleep()

if __name__ == '__main__':
    rospy.init_node('place_data_visualisation_publisher')
    node = PlaceDataVisualisationPublisher()
    node.spin(10)
